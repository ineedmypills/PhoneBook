//
// Created by ineedmypills on 21.05.2025.
// Generated by AI (каюсь)
//

#ifndef PHONEBOOK_TXTTOJSON_HPP
#define PHONEBOOK_TXTTOJSON_HPP

#include <iostream>
#include <fstream>
#include <string>
#include <filesystem>
#include "json.hpp"

using json = nlohmann::json;
namespace fs = std::filesystem;

inline std::string trim_string(const std::string &s) {
    const size_t start = s.find_first_not_of(" \t");
    if (start == std::string::npos) return "";
    const size_t end = s.find_last_not_of(" \t");
    return s.substr(start, end - start + 1);
}

inline void txtToJson(const std::string& inputFile, const std::string& outputFile) {
    fs::path inputPath = fs::absolute(inputFile);
    fs::path outputPath = fs::absolute(outputFile);

    if (!fs::exists(inputPath)) {
        std::cerr << "Ошибка: Не найден файл:\n" << inputPath << "\n";
        return;
    }

    std::ifstream in(inputPath);
    if (!in.is_open()) {
        std::cerr << "Ошибка: Невозможно открыть файл:\n" << inputPath << "\n";
        return;
    }

    std::ofstream out(outputPath);
    if (!out.is_open()) {
        std::cerr << "Ошибка: Невозможно создать файл:\n" << outputPath << "\n";
        in.close();
        return;
    }

    json jsonArray = json::array();
    std::string line;
    size_t lineNum = 0;

    while (std::getline(in, line)) {
        lineNum++;
        std::string trimmedLine = trim_string(line);

        if (trimmedLine.empty()) continue;

        size_t colonPos = trimmedLine.find(':');
        if (colonPos == std::string::npos) {
            std::cerr << "Ошибка строки " << lineNum << ": Отсутствует двоеточие\n";
            continue;
        }

        std::string namePart = trim_string(trimmedLine.substr(0, colonPos));
        std::string numberPart = trim_string(trimmedLine.substr(colonPos + 1));

        if (numberPart.empty()) {
            std::cerr << "Ошибка строки " << lineNum << ": Отсутствует номер\n";
            continue;
        }

        size_t spacePos = namePart.find(' ');
        if (spacePos == std::string::npos || spacePos == 0 || spacePos == namePart.length() - 1) {
            std::cerr << "Ошибка строки " << lineNum << ": Неверный формат имени\n";
            continue;
        }

        json entry;
        entry["firstName"] = trim_string(namePart.substr(spacePos + 1));
        entry["lastName"] = trim_string(namePart.substr(0, spacePos));
        entry["number"] = numberPart;

        jsonArray.push_back(entry);
    }

    out << jsonArray.dump(4);

    in.close();
    out.close();
}

#endif //PHONEBOOK_TXTTOJSON_HPP
